apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: example-extra-resources
spec:
  compositeTypeRef:
    apiVersion: example.crossplane.io/v1beta1
    kind: XR
  mode: Pipeline
  pipeline:
    - step: extra-resources
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            ---
            apiVersion: meta.gotemplating.fn.crossplane.io/v1alpha1
            kind: ExtraResources
            requirements:
              bucket:
                apiVersion: s3.aws.upbound.io/v1beta1
                kind: Bucket
                matchName: my-awesome-{{ .observed.composite.resource.spec.environment }}-bucket  

    - step: render-templates
      functionRef:
        name: function-go-templating
      input:
        apiVersion: gotemplating.fn.crossplane.io/v1beta1
        kind: GoTemplate
        source: Inline
        inline:
          template: |
            {{ $someExtraResources := getExtraResourcesFromContext . "bucket" }}
            {{- range $i, $extraResource := default (list) $someExtraResources }}
            ---
            apiVersion: kubernetes.crossplane.io/v1alpha1
            kind: Object
            metadata:
              annotations: 
                gotemplating.fn.crossplane.io/composition-resource-name: bucket-configmap-{{ $i }}
            spec:
              forProvider:
                manifest:
                  apiVersion: v1
                  kind: Configmap
                  metadata:
                    name: {{ $extraResource.resource.metadata.name }}-bucket
                  data:
                    bucket: {{ $extraResource.resource.status.atProvider.id }} 
              providerConfigRef:
                name: "kubernetes"
            {{- end }}
            ---
            apiVersion: example.crossplane.io/v1beta1
            kind: XR
            status:
              dummy: cool-status
